start: program

program :: int[]
	= __* values:expressions __* {
		return values;
	}
expressions :: int[]
	= head:expression tail:(__ expression)* {
		return new[] { head }.Concat(tail.Select(x => x.Item2)).ToArray();
	}
expression :: int
	= head:term tail:(_ ('+' / '-') _ term)* {
		return tail.Aggregate(head, (x, y) => y.Item2 == '+' ? x + y.Item4 : x - y.Item4);
	}
term :: int
	= head:primitive tail:(_ ('*' / '/') _ primitive)* {
		return tail.Aggregate(head, (x, y) => y.Item2 == '*' ? x * y.Item4 : x / y.Item4);
	}
primitive :: int
	= signed:'-'? digit:[0-9]+ {
		var number = int.Parse(digit);
		return signed.isJust ? -number : number;
	}
_
	= [ \t]+
__
	= _* [\r\n]+ _*
